
#Область ПрограммныйИнтерфейс

Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	
	Если ИдентификаторКоманды = "АвтоматическийПереносДатыОтгрузкиПоЗаказам" Тогда
		
		АвтоматическийПереносДатыОтгрузкиПоЗаказам();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура АвтоматическийПереносДатыОтгрузкиПоЗаказам() Экспорт

	СписокНеВзаимосвязанныхЗаказов = СписокНеВзаимосвязанныхЗаказовЗаказовКлиентаДляПереносаДатыОтгрузки();
	
	ПеренестиДатуОтгрузкиЗаказов();

КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуКоманд()
	
	// Создадим пустую таблицу команд и колонки в ней
	Команды = Новый ТаблицаЗначений;
	
	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 
	
	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	// Для печатной формы должен содержать строку ПечатьMXL 
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Функция СведенияОВнешнейОбработке() Экспорт
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
	ПараметрыРегистрации = Новый Структура;
	
	// Объявим еще одну переменную, которая нам потребуется ниже
	МассивНазначений = Новый Массив;
	
	// Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
	// Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
	ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");
	//ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	
	// Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
	// Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
	// которые поддерживают механизм ВПФ
	//МассивНазначений.Добавить("Документ.ЗаказКлиента");
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	
	// Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Наименование", НСтр("ru = 'Групповая обработка переноса даты отгрузки заказов клиента'"));
	
	// Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	
	// Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
	ПараметрыРегистрации.Вставить("Версия", "1.0");    
	ПараметрыРегистрации.Вставить("Информация",
		НСтр("ru = 'Групповая обработка переноса даты отгрузки заказов клиента.
				|Запускает обработку заказов по расписанию'"));
	
	// Создадим таблицу команд (подробнее смотрим ниже)
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	////Добавление для вызовов из регламентного 
	//СтрокаТЧ = ТаблицаКоманд.Добавить();
	//СтрокаТЧ.Идентификатор = "АвтоматическийПереносДатыОтгрузкиПоЗаказам";
	//СтрокаТЧ.Представление = НСтр("ru = 'Автоматический перенос даты отгрузки по заказам'");
	//СтрокаТЧ.ПоказыватьОповещение = Истина;
	//СтрокаТЧ.Использование = "ВызовСерверногоМетода";
	
	////Добавление для вызовов из обработки 
	СтрокаТЧ = ТаблицаКоманд.Добавить();
	СтрокаТЧ.Идентификатор = "ГрупповаяОбработкаПереносаДатыОтгрузкиЗаказовКлиента";
	СтрокаТЧ.Представление = НСтр("ru = 'Групповая обработка переноса даты отгрузки заказов клиента'");
	СтрокаТЧ.ПоказыватьОповещение = Истина;
	СтрокаТЧ.Использование = "ОткрытиеФормы";

	//// Сохраним таблицу команд в параметры регистрации обработки
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	// Теперь вернем системе наши параметры
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция СписокНеВзаимосвязанныхЗаказовЗаказовКлиентаДляПереносаДатыОтгрузки() Экспорт
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Источник", Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS);
	Запрос.УстановитьПараметр("КаналПродаж", ЭтотОбъект.КаналПродаж);
	Запрос.УстановитьПараметр("ТекущаяДата", ?(ЗначениеЗаполнено(ЭтотОбъект.ТекущаяДата), ЭтотОбъект.ТекущаяДата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДокументЗаказКлиента.Ссылка КАК Заказ
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДокументЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдер
	|		ПО (ДокументЗаказКлиента.Ссылка = РасходныйОрдер.Распоряжение)
	|			И РасходныйОрдер.Ссылка.Проведен
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО (ДокументЗаказКлиента.Ссылка = РеализацияТоваровУслуг.ЗаказКлиента)
	|			И РеализацияТоваровУслуг.Проведен
	|ГДЕ
	|	НЕ ДокументЗаказКлиента.ПометкаУдаления
	|	И НЕ ДокументЗаказКлиента.бг_ИсточникЗаказа = &Источник
	|	И ДокументЗаказКлиента.СуммаДокумента > 0
	|	И ДокументЗаказКлиента.бг_Магазин = Значение(Справочник.Контрагенты.ПустаяСсылка)
	|	И ДокументЗаказКлиента.бг_ЗаказРозничногоПокупателя = Значение(Документ.ЗаказКлиента.ПустаяСсылка)
	|	И ДокументЗаказКлиента.Организация = &Организация
	|	И ДокументЗаказКлиента.ДатаОтгрузки < &ТекущаяДата
	|	И ДокументЗаказКлиента.ДатаОтгрузки >= ДобавитьКДате(НачалоПериода(&ТекущаяДата, Месяц), День, -1)
	|	И НЕ ДокументЗаказКлиента.бг_ДолгосрочныйРезерв
	//|	И ДокументЗаказКлиента.бг_КаналПродаж = &КаналПродаж
	|	И РасходныйОрдер.Ссылка is NULL
	|	И РеализацияТоваровУслуг.Ссылка is NULL";
	
	Возврат Запрос.Выполнить().Выгрузить();

	//|	И РАЗНОСТЬДАТ(&ТекущаяДата, ЗаказКлиента.ДатаОтгрузки, ДЕНЬ) = 1

КонецФункции

Функция СписокВзаимосвязанныхЗаказовЗаказовКлиентаДляПереносаДатыОтгрузки() Экспорт
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("МагазинПустаяСсылка", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ЗаказРозничногоПокупателяПустаяСсылка", Документы.ЗаказКлиента.ПустаяСсылка());
	Запрос.УстановитьПараметр("Источник", Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS);
	Запрос.УстановитьПараметр("ТекущаяДата", ?(ЗначениеЗаполнено(ЭтотОбъект.ТекущаяДата), ЭтотОбъект.ТекущаяДата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДокументЗаказКлиента.Ссылка КАК ЗаказРозничногоМагазина,
	|	ЗаказКлиентаТовары.Ссылка КАК СвязанныйЗаказ
	|ПОМЕСТИТЬ ЗаказыМагазина
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДокументЗаказКлиента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ПО (ДокументЗаказКлиента.Ссылка = ЗаказКлиентаТовары.бг_ЗаказКлиентаИсточникОбеспечения)
	|			И (НЕ ДокументЗаказКлиента.ПометкаУдаления)
	|ГДЕ
	|	Не ДокументЗаказКлиента.бг_ИсточникЗаказа = &Источник
	|	И ДокументЗаказКлиента.СуммаДокумента > 0
	|	И Не ДокументЗаказКлиента.бг_Магазин = &МагазинПустаяСсылка
	|	И ДокументЗаказКлиента.бг_ЗаказРозничногоПокупателя = &ЗаказРозничногоПокупателяПустаяСсылка
	|	И ЗаказКлиентаТовары.Ссылка.Организация = &Организация
	|	И Не ЗаказКлиентаТовары.Ссылка.бг_Магазин = &МагазинПустаяСсылка
	|	И Не ЗаказКлиентаТовары.Ссылка.бг_ЗаказРозничногоПокупателя = &ЗаказРозничногоПокупателяПустаяСсылка
	|	И ЗаказКлиентаТовары.Ссылка.ДатаОтгрузки < &ТекущаяДата
	|	И ЗаказКлиентаТовары.Ссылка.ДатаОтгрузки >= ДобавитьКДате(НачалоПериода(&ТекущаяДата, Месяц), День, -1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыМагазина.ЗаказРозничногоМагазина КАК ИсходныйЗаказ,
	|	ЗаказыМагазина.СвязанныйЗаказ КАК СвязанныйЗаказ
	|ИЗ
	|	ЗаказыМагазина КАК ЗаказыМагазина
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдер
	|		ПО ЗаказыМагазина.СвязанныйЗаказ = РасходныйОрдер.Распоряжение
	|			И РасходныйОрдер.Ссылка.Проведен
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО (ЗаказыМагазина.СвязанныйЗаказ = РеализацияТоваровУслуг.ЗаказКлиента)
	|			И РеализацияТоваровУслуг.Проведен
	|ГДЕ
	|	РасходныйОрдер.Ссылка is NULL
	|	И РеализацияТоваровУслуг.Ссылка is NULL";

	Возврат Запрос.Выполнить().Выгрузить();

	//|	И РАЗНОСТЬДАТ(&ТекущаяДата, ЗаказыМагазина.СвязанныйЗаказ.ДатаОтгрузки, ДЕНЬ) = 1

КонецФункции

Функция ДатаСледующегоРабочегоДня(Знач ПредыдущаяДатаОтгрузки)
	
	СдвигРабочихДней = 1;
	
	Возврат КалендарныеГрафики.ДатаПоКалендарю(
		КалендарныеГрафики.ОсновнойПроизводственныйКалендарь(),
		ПредыдущаяДатаОтгрузки, 
		СдвигРабочихДней, 
		Ложь);
	
КонецФункции

Процедура ПеренестиДатуОтгрузкиЗаказов() Экспорт

	Для каждого Строка Из Заказы Цикл
		
		ЗаказКлиентаОбъект = Строка.Заказ.ПолучитьОбъект();
		ПредыдущаяДатаОтгрузки = ЗаказКлиентаОбъект.ДатаОтгрузки;
		ЗаказКлиентаОбъект.ДатаОтгрузки = ДатаСледующегоРабочегоДня(ПредыдущаяДатаОтгрузки);
		ЗаказКлиентаОбъект.бг_ПричинаПереносаДатыОтгрузки = "Автоматический перенос даты отгрузки";
		ЗаписатьДокумент(ЗаказКлиентаОбъект);

	КонецЦикла;

КонецПроцедуры

Процедура ПеренестиДатуОтгрузкиСвязанныхЗаказов() Экспорт
	
	Для каждого Строка Из СвязанныеЗаказы Цикл
		
		ИсходныйЗаказОбъект = Строка.ИсходныйЗаказ.ПолучитьОбъект();
		ПредыдущаяДатаОтгрузки = ИсходныйЗаказОбъект.ДатаОтгрузки;
		ИсходныйЗаказОбъект.ДатаОтгрузки = ДатаСледующегоРабочегоДня(ПредыдущаяДатаОтгрузки);
		ИсходныйЗаказОбъект.бг_ПричинаПереносаДатыОтгрузки = "Автоматический перенос даты отгрузки";
		ИсходныйЗаказОбъект.ДополнительныеСвойства.Вставить("НеСниматьСтатусСогласованияЗаказа", Истина);
		ИсходныйЗаказОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьРасчетСкидок", Истина);

		СвязанныйЗаказОбъект = Строка.СвязанныйЗаказ.ПолучитьОбъект();
		ПредыдущаяДатаОтгрузки = СвязанныйЗаказОбъект.ДатаОтгрузки;
		НоваяДатаОтгрузки = ДатаСледующегоРабочегоДня(ПредыдущаяДатаОтгрузки);
		
		СвязанныйЗаказОбъект.ДатаОтгрузки = НоваяДатаОтгрузки;
		СвязанныйЗаказОбъект.бг_ПричинаПереносаДатыОтгрузки = "Автоматический перенос даты отгрузки";
		НайденныеСтроки = СвязанныйЗаказОбъект.Товары.Найти(Строка.ИсходныйЗаказ, "бг_ЗаказКлиентаИсточникОбеспечения");
		
		Если НайденныеСтроки <> Неопределено Тогда
			
			Для каждого НайденнаяСтрока Из СвязанныйЗаказОбъект.Товары Цикл
				
				НайденнаяСтрока.бг_ДатаОтгрузкиЗаказаКлиентаИсточникаОбеспечения = ИсходныйЗаказОбъект.ДатаОтгрузки;
				//Сообщить(ИсходныйЗаказОбъект.ДатаОтгрузки);
			КонецЦикла;
			
		КонецЕсли;
			
		НачатьТранзакцию();
		
		//Попытка
			
			ЗаписатьДокумент(ИсходныйЗаказОбъект);
			ЗаписатьДокумент(СвязанныйЗаказОбъект);
			
			Если  ТранзакцияАктивна()  Тогда
				ЗафиксироватьТранзакцию(); 
			КонецЕсли;
			
		//Исключение
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию(); 
			КонецЕсли;
			
		//КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьДокумент(ЗаказКлиентаОбъект)
	
	ЗаказКлиентаОбъект.ДополнительныеСвойства.Вставить("НеСниматьСтатусСогласованияЗаказа", Истина);
	ЗаказКлиентаОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьРасчетСкидок", Истина);

	//Если ЗаказКлиентаОбъект.Проведен Тогда
		
	//	ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//Иначе
		//если нет в движениях
		ЗаказКлиентаОбъект.ОбменДанными.Загрузка = Истина;
		ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Запись);

	//КонецЕсли; 

КонецПроцедуры


#КонецОбласти

//как будет логироваться?